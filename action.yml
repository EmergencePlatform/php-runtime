name: 'Emergence: Deploy Site Preview'
description: 'Deploys a preview site from a branch'
inputs:
  github-token:
    description: 'GitHub token'
    required: true
  source-ref:
    description: 'Git ref for source tree to project site holobranch from'
    required: false
    default: ${{ github.ref }}
  source-fetch:
    description: 'Whether to check out the source repository'
    required: false
    default: 'true'
  kube-config:
    description: 'Base64-encoded KUBECONFIG file content'
    required: true
  kube-namespace:
    description: 'Namespace on Kubernetes cluster to deploy preview environment to'
    required: true
  kube-hostname:
    description: 'Hostname suffix for preview environments'
    required: true
  environment-name:
    description: 'Name for environment to deploy preview to'
    required: false
    default: ''
  environment-transient:
    description: 'Whether named environment is transient'
    required: false
    default: ''
  image-name:
    description: 'Name for built container image to append to repository name'
    required: false
    default: ''
  image-tag:
    description: 'Tag for built container image'
    required: false
    default: ''
  helm-holobranch:
    description: 'Name of holobranch to project Helm chart from'
    required: false
    default: 'helm-chart'
  fixtures-holobranch:
    description: 'Name of holobranch to project SQL fixtures from'
    required: false
    default: 'fixtures'
outputs:
  kube-namespace:
    description: 'Namespace preview was deployed to'
    value: ${{ steps.configure-kubectl.outputs.kube-namespace }}
  environment-name:
    description: 'Name of environment deployed to'
    value: ${{ steps.determine-environment.outputs.environment-name }}
  environment-transient:
    description: 'Whether deployed environment was marked transient'
    value: ${{ steps.determine-environment.outputs.environment-transient }}
  environment-hostname:
    description: 'Hostname that deployed environment is reachable at'
    value: ${{ steps.determine-environment.outputs.environment-hostname }}
  image-name-full:
    description: 'Full registry+name path for built container image'
    value: ${{ steps.determine-container.outputs.image-name-full }}
  image-tag:
    description: 'Tag used for built container image'
    value: ${{ steps.determine-container.outputs.image-tag }}
  image-tag-full:
    description: 'Full registry+name+tag path used for built container image'
    value: ${{ steps.determine-container.outputs.image-tag-full }}

runs:
  using: composite
  steps:

  - name: Determine environment to deploy to
    id: determine-environment
    shell: bash
    env:
      ENVIRONMENT_NAME: ${{ inputs.environment-name }}
      ENVIRONMENT_TRANSIENT: ${{ inputs.environment-transient }}
      KUBE_HOSTNAME: ${{ inputs.kube-hostname }}
    run: ${{ github.action_path }}/determine-environment.sh

  - name: Determine full Docker container name
    id: determine-container
    shell: bash
    env:
      IMAGE_NAME: ${{ inputs.image-name }}
      IMAGE_TAG: ${{ inputs.image-tag }}
      ENVIRONMENT_NAME: ${{ steps.determine-environment.outputs.environment-name }}
    run: ${{ github.action_path }}/determine-container.sh

  - name: Configure kubectl
    id: configure-kubectl
    shell: bash
    env:
      KUBE_CONFIG_DATA: ${{ inputs.kube-config }}
      KUBE_NAMESPACE: ${{ inputs.kube-namespace }}
    run: ${{ github.action_path }}/configure-kubectl.sh

  - name: Start GitHub Deployment
    uses: bobheadxi/deployments@v1
    id: deployment
    with:
      step: start
      token: ${{ inputs.github-token }}
      env: ${{ steps.determine-environment.outputs.environment-name }}
      ref: ${{ inputs.source-ref }}
      logs: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      override: true

  - name: Build site container
    id: build-site-container
    uses: EmergencePlatform/php-runtime@github-actions/build-site-container/v1
    with:
      github-token: ${{ inputs.github-token }}
      source-ref: ${{ inputs.source-ref }}
      source-fetch: ${{ inputs.source-fetch }}
      site-version: 0.0.0
      image-name: ${{ inputs.image-name }}
      image-tag: ${{ steps.determine-container.outputs.image-tag }}
      image-tag-version: 'false'
      image-tag-version-minor: 'false'
      image-tag-version-major: 'false'

  - name: 'Project holobranch: ${{ inputs.source-ref }}=>${{ inputs.helm-holobranch }}'
    id: project-helm-chart
    uses: JarvusInnovations/hologit@actions/projector/v1
    env:
      HAB_LICENSE: accept-no-persist
    with:
      fetch: false
      ref: ${{ inputs.source-ref }}
      holobranch: ${{ inputs.helm-holobranch }}

  - name: Deploy instance via Helm template
    id: deploy-helm-chart
    shell: bash
    env:
      KUBE_NAMESPACE: ${{ inputs.kube-namespace }}
      ENVIRONMENT_NAME: ${{ steps.determine-environment.outputs.environment-name }}
      ENVIRONMENT_HOSTNAME: ${{ steps.determine-environment.outputs.environment-hostname }}
      HELM_CHART_TREE: ${{ steps.project-helm-chart.outputs.tree }}
      DOCKER_NAME: ${{ steps.build-site-container.outputs.image-name-full }}
      DOCKER_TAG: ${{ steps.build-site-container.outputs.image-tag }}
    run: ${{ github.action_path }}/deploy-helm-chart.sh

  - name: Wait for Deployment to be ready
    id: wait-for-deployment
    shell: bash
    env:
      ENVIRONMENT_NAME: ${{ steps.determine-environment.outputs.environment-name }}
    run: ${{ github.action_path }}/wait-for-deployment.sh

  - name: 'Project holobranch: ${{ inputs.source-ref }}=>${{ inputs.fixtures-holobranch }}'
    id: project-fixtures
    uses: JarvusInnovations/hologit@actions/projector/v1
    env:
      HAB_LICENSE: accept-no-persist
    with:
      fetch: false
      ref: ${{ inputs.source-ref }}
      holobranch: ${{ inputs.fixtures-holobranch }}

  - name: Load fixtures into database
    shell: bash
    env:
      FIXTURES_TREE: ${{ steps.project-fixtures.outputs.tree }}
      POD_NAME: ${{ steps.wait-for-deployment.outputs.pod-name }}
      SERVICE_NAME: ${{ steps.wait-for-deployment.outputs.service-name }}
      DATABASE_NAME: ${{ steps.wait-for-deployment.outputs.database-name }}
    run: ${{ github.action_path }}/load-fixtures.sh

  - name: Finish GitHub Deployment
    uses: bobheadxi/deployments@v1
    if: ${{ always() }}
    with:
      step: finish
      token: ${{ inputs.github-token }}
      status: ${{ job.status }}
      env: ${{ steps.determine-environment.outputs.environment-name }}
      ref: ${{ inputs.source-ref }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      env_url: 'https://${{ steps.determine-environment.outputs.environment-hostname }}/'
      logs: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
