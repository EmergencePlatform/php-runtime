name: 'Emergence: Deploy Site Preview'
description: 'Deploys a preview site from a branch'
inputs:
  github-token:
    description: 'GitHub token'
    required: true
  environment-name:
    description: 'Name for environment to deploy preview to'
    required: false
    default: ''
  environment-transient:
    description: 'Whether named environment is transient'
    required: false
    default: ''
  image-name:
    description: 'Name for built container image to append to repository name'
    required: false
    default: ''
  image-tag:
    description: 'Tag for built container image'
    required: false
    default: ''
outputs:
  environment-name:
    description: 'Name of environment deployed to'
    value: ${{ steps.determine-environment.outputs.environment-name }}
  environment-transient:
    description: 'Whether deployed environment was marked transient'
    value: ${{ steps.determine-environment.outputs.environment-transient }}
  image-name-full:
    description: 'Full registry+name path for built container image'
    value: ${{ steps.determine-container.outputs.image-name-full }}
  image-tag:
    description: 'Tag used for built container image'
    value: ${{ steps.determine-container.outputs.image-tag }}
  image-tag-full:
    description: 'Full registry+name+tag path used for built container image'
    value: ${{ steps.determine-container.outputs.image-tag-full }}

runs:
  using: composite
  steps:

  - name: Determine environment to deploy to
    id: determine-environment
    shell: bash
    env:
      ENVIRONMENT_NAME: ${{ inputs.environment-name }}
      ENVIRONMENT_TRANSIENT: ${{ inputs.environment-transient }}
    run: |
      if [ -z "${ENVIRONMENT_NAME}" ]; then
        echo "Attempting to determine environment name automatically"

        if [ "${GITHUB_EVENT_NAME}" == "pull_request" ]; then
          ENVIRONMENT_NAME="pr-$(jq --raw-output .pull_request.number "${GITHUB_EVENT_PATH}")"
          ENVIRONMENT_TRANSIENT_DEFAULT='true'
        elsif [ "${GITHUB_HEAD_REF}" == "$(jq --raw-output .repository.default_branch "${GITHUB_EVENT_PATH}")" ]; then
          ENVIRONMENT_NAME='latest'
          ENVIRONMENT_TRANSIENT_DEFAULT='false'
        else
          echo "Could not detect environment name. Either specify environment-name input or only trigger from pull request event"
          exit 1
        fi
      fi

      if [ -z "${ENVIRONMENT_TRANSIENT}" ]; then
        if [ -n "${ENVIRONMENT_TRANSIENT_DEFAULT}" ]; then
          ENVIRONMENT_TRANSIENT="${ENVIRONMENT_TRANSIENT_DEFAULT}"
        else
          ENVIRONMENT_TRANSIENT='true'
        fi
      fi

      echo "Outputting: environment-name=${ENVIRONMENT_NAME}"
      echo "environment-name=${ENVIRONMENT_NAME}" >> "${GITHUB_OUTPUT}"

      echo "Outputting: environment-transient=${ENVIRONMENT_TRANSIENT}"
      echo "environment-transient=${ENVIRONMENT_TRANSIENT}" >> "${GITHUB_OUTPUT}"

  - name: Determine full Docker container name
    id: determine-container
    shell: bash
    env:
      IMAGE_NAME: ${{ inputs.image-name }}
      IMAGE_TAG: ${{ inputs.image-tag }}
      ENVIRONMENT_NAME: ${{ steps.determine-environment.outputs.environment-name }}
    run: |
      IMAGE_NAME_FULL="ghcr.io/${GITHUB_REPOSITORY,,}"
      if [ -n "${IMAGE_NAME}" ]; then
        IMAGE_NAME_FULL="${IMAGE_NAME_FULL}/${IMAGE_NAME}"
      fi

      echo "Outputting: image-name-full=${IMAGE_NAME_FULL}"
      echo "image-name-full=${IMAGE_NAME_FULL}" >> "${GITHUB_OUTPUT}"

      if [ -z "${IMAGE_TAG}" ]; then
        IMAGE_TAG="${ENVIRONMENT_NAME}"
      fi

      echo "Outputting: image-tag=${IMAGE_TAG}"
      echo "image-tag=${IMAGE_TAG}" >> "${GITHUB_OUTPUT}"

      IMAGE_TAG_FULL="${IMAGE_NAME_FULL}:${IMAGE_TAG}"

      echo "Outputting: image-tag-full=${IMAGE_TAG_FULL}"
      echo "image-tag-full=${IMAGE_TAG_FULL}" >> "${GITHUB_OUTPUT}"
